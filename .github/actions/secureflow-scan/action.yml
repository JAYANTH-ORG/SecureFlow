name: 'SecureFlow Security Scan'
description: 'Run comprehensive security scanning with SecureFlow-Core'
branding:
  icon: 'search'
  color: 'red'

inputs:
  target:
    description: 'Target directory or file to scan'
    required: false
    default: '.'
  
  project-type:
    description: 'Project type (auto, java-maven, nodejs, python, dotnet, etc.)'
    required: false
    default: 'auto'
  
  scan-types:
    description: 'Comma-separated list of scan types (sast,secrets,dependencies,containers,iac)'
    required: false
    default: 'sast,secrets,dependencies'
  
  severity-threshold:
    description: 'Minimum severity threshold (low, medium, high, critical)'
    required: false
    default: 'medium'
  
  output-format:
    description: 'Output format (sarif, json, html, text, all)'
    required: false
    default: 'sarif'
  
  output-file:
    description: 'Output file path (without extension for multiple formats)'
    required: false
    default: 'security-results'
  
  generate-html:
    description: 'Generate HTML report in addition to primary format'
    required: false
    default: 'true'
  
  config-file:
    description: 'Path to SecureFlow configuration file'
    required: false
    default: '.secureflow.yaml'
  
  fail-on-findings:
    description: 'Fail the action if security findings are detected'
    required: false
    default: 'false'
  
  java-version:
    description: 'Java version for Java projects'
    required: false
    default: ''
  
  node-version:
    description: 'Node.js version for Node.js projects'
    required: false
    default: ''

outputs:
  results-file:
    description: 'Path to the primary results file'
    value: ${{ steps.scan.outputs.results-file }}
  
  html-report:
    description: 'Path to the HTML report file'
    value: ${{ steps.scan.outputs.html-report }}
  
  findings-count:
    description: 'Total number of security findings'
    value: ${{ steps.scan.outputs.findings-count }}
  
  critical-count:
    description: 'Number of critical severity findings'
    value: ${{ steps.scan.outputs.critical-count }}
  
  high-count:
    description: 'Number of high severity findings'
    value: ${{ steps.scan.outputs.high-count }}
  
  scan-status:
    description: 'Overall scan status (success, failed, completed-with-findings)'
    value: ${{ steps.scan.outputs.scan-status }}
  
  tools-run:
    description: 'Comma-separated list of tools that were executed'
    value: ${{ steps.scan.outputs.tools-run }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "üîç Validating scan parameters..."
        
        # Validate scan types
        VALID_TYPES="sast,secrets,dependencies,containers,iac,compliance"
        IFS=',' read -ra TYPES <<< "${{ inputs.scan-types }}"
        for type in "${TYPES[@]}"; do
          if [[ ",$VALID_TYPES," != *",$type,"* ]]; then
            echo "‚ùå Invalid scan type: $type"
            echo "Valid types: $VALID_TYPES"
            exit 1
          fi
        done
        
        # Validate severity threshold
        VALID_SEVERITIES="low,medium,high,critical"
        if [[ ",$VALID_SEVERITIES," != *",${{ inputs.severity-threshold }},"* ]]; then
          echo "‚ùå Invalid severity threshold: ${{ inputs.severity-threshold }}"
          echo "Valid severities: $VALID_SEVERITIES"
          exit 1
        fi
        
        echo "‚úÖ Input validation passed"

    - name: Prepare scan environment
      shell: bash
      run: |
        echo "üîß Preparing scan environment..."
        
        # Create output directory
        mkdir -p "$(dirname "${{ inputs.output-file }}")"
        
        # Set up project-specific environment
        case "${{ inputs.project-type }}" in
          "java-maven")
            echo "‚òï Setting up Java Maven environment"
            if [ -n "${{ inputs.java-version }}" ]; then
              echo "JAVA_VERSION=${{ inputs.java-version }}" >> $GITHUB_ENV
            fi
            ;;
          "nodejs")
            echo "üì¶ Setting up Node.js environment"
            if [ -n "${{ inputs.node-version }}" ]; then
              echo "NODE_VERSION=${{ inputs.node-version }}" >> $GITHUB_ENV
            fi
            ;;
          "python")
            echo "üêç Setting up Python environment"
            ;;
          "auto")
            echo "üîç Auto-detecting project type"
            ;;
        esac
        
        echo "‚úÖ Environment prepared"

    - name: Run SecureFlow scan
      id: scan
      shell: bash
      run: |
        echo "üõ°Ô∏è Running SecureFlow security scan..."
        
        # Initialize variables
        FINDINGS_COUNT=0
        CRITICAL_COUNT=0
        HIGH_COUNT=0
        SCAN_STATUS="success"
        TOOLS_RUN=""
        
        # Determine output file extensions
        PRIMARY_OUTPUT="${{ inputs.output-file }}"
        if [ "${{ inputs.output-format }}" = "sarif" ]; then
          PRIMARY_OUTPUT="${{ inputs.output-file }}.sarif"
        elif [ "${{ inputs.output-format }}" = "json" ]; then
          PRIMARY_OUTPUT="${{ inputs.output-file }}.json"
        elif [ "${{ inputs.output-format }}" = "html" ]; then
          PRIMARY_OUTPUT="${{ inputs.output-file }}.html"
        elif [ "${{ inputs.output-format }}" = "text" ]; then
          PRIMARY_OUTPUT="${{ inputs.output-file }}.txt"
        fi
        
        HTML_REPORT="${{ inputs.output-file }}.html"
        
        # Create output directory
        mkdir -p "$(dirname "$PRIMARY_OUTPUT")"
        mkdir -p security-results
        
        echo "üìù Output files:"
        echo "  Primary: $PRIMARY_OUTPUT"
        echo "  HTML Report: $HTML_REPORT"
        
        # Try SecureFlow CLI first
        SECUREFLOW_SUCCESS=false
        if command -v secureflow &> /dev/null; then
          echo "üîß Using SecureFlow CLI..."
          
          # Build CLI command
          CMD="secureflow scan all ${{ inputs.target }}"
          CMD="$CMD --scan-types ${{ inputs.scan-types }}"
          CMD="$CMD --project-type ${{ inputs.project-type }}"
          CMD="$CMD --output-format ${{ inputs.output-format }}"
          CMD="$CMD --output-file $PRIMARY_OUTPUT"
          CMD="$CMD --severity-threshold ${{ inputs.severity-threshold }}"
          
          if [ -f "${{ inputs.config-file }}" ]; then
            CMD="$CMD --config ${{ inputs.config-file }}"
          fi
          
          if [ "${{ inputs.project-type }}" = "java-maven" ] && [ -n "${{ inputs.java-version }}" ]; then
            CMD="$CMD --java-version ${{ inputs.java-version }}"
          fi
          
          echo "Executing: $CMD"
          
          if $CMD; then
            echo "‚úÖ SecureFlow CLI scan completed successfully"
            SECUREFLOW_SUCCESS=true
            TOOLS_RUN="secureflow-cli"
          else
            echo "‚ö†Ô∏è SecureFlow CLI failed, will try individual tools"
          fi
        fi
        
        # Try SecureFlow Python module if CLI failed
        if [ "$SECUREFLOW_SUCCESS" = "false" ]; then
          echo "üêç Trying SecureFlow Python module..."
          
          python3 -c "
import asyncio
import json
import os
import sys
from pathlib import Path

try:
    from secureflow_core import SecureFlow
    from secureflow_core.config import Config
    print('‚úÖ SecureFlow module imported successfully')
    
    async def run_scan():
        try:
            config = Config()
            config.scanning.project_type = '${{ inputs.project-type }}'
            config.scanning.scan_types = '${{ inputs.scan-types }}'.split(',')
            config.scanning.severity_threshold = '${{ inputs.severity-threshold }}'
            config.output.format = '${{ inputs.output-format }}'
            config.output.file = '$PRIMARY_OUTPUT'
            
            print(f'üîç Scanning: ${{ inputs.target }}')
            print(f'üìã Types: {config.scanning.scan_types}')
            print(f'üéØ Project: {config.scanning.project_type}')
            
            sf = SecureFlow(config)
            results = await sf.scan_repository('${{ inputs.target }}')
            
            print(f'‚úÖ Scan completed: {len(results)} results')
            return results
            
        except Exception as e:
            print(f'‚ùå Module scan failed: {e}')
            import traceback
            traceback.print_exc()
            return None
    
    results = asyncio.run(run_scan())
    if results is not None:
        print('SUCCESS')
        exit(0)
    else:
        print('FAILED')
        exit(1)
        
except ImportError as e:
    print(f'‚ùå SecureFlow module not available: {e}')
    exit(1)
" && SECUREFLOW_SUCCESS=true && TOOLS_RUN="secureflow-module" || echo "‚ö†Ô∏è SecureFlow module also failed"
        fi
        
        # Fallback to individual security tools
        if [ "$SECUREFLOW_SUCCESS" = "false" ]; then
          echo "üîß Falling back to individual security tools..."
          
          # Run individual tools based on scan types
          IFS=',' read -ra SCAN_TYPES <<< "${{ inputs.scan-types }}"
          
          for scan_type in "${SCAN_TYPES[@]}"; do
            case "$scan_type" in
              "sast")
                echo "üîç Running SAST scan with Semgrep..."
                if command -v semgrep &> /dev/null; then
                  semgrep --config=auto --json --output=security-results/semgrep.json ${{ inputs.target }} || true
                  TOOLS_RUN="$TOOLS_RUN,semgrep"
                  echo "‚úÖ Semgrep scan completed"
                else
                  echo "‚ö†Ô∏è Semgrep not available"
                fi
                ;;
              "secrets")
                echo "üîê Running secrets scan with TruffleHog..."
                if command -v trufflehog &> /dev/null; then
                  trufflehog filesystem ${{ inputs.target }} --json > security-results/trufflehog.json 2>/dev/null || true
                  TOOLS_RUN="$TOOLS_RUN,trufflehog"
                  echo "‚úÖ TruffleHog scan completed"
                else
                  echo "‚ö†Ô∏è TruffleHog not available"
                fi
                ;;
              "dependencies")
                echo "üì¶ Running dependency scan..."
                if [ "${{ inputs.project-type }}" = "java-maven" ] && [ -f "pom.xml" ]; then
                  # Maven dependency check
                  if command -v mvn &> /dev/null; then
                    mvn dependency:list -DoutputFile=security-results/maven-deps.txt || true
                    TOOLS_RUN="$TOOLS_RUN,maven-deps"
                  fi
                elif command -v safety &> /dev/null; then
                  safety check --json --output security-results/safety.json || true
                  TOOLS_RUN="$TOOLS_RUN,safety"
                fi
                ;;
              "containers")
                echo "üê≥ Checking for container files..."
                if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
                  echo "Container files found but no scanner available"
                fi
                ;;
            esac
          done
          
          # Remove leading comma
          TOOLS_RUN=$(echo "$TOOLS_RUN" | sed 's/^,//')
          
          if [ -n "$TOOLS_RUN" ]; then
            SCAN_STATUS="completed-with-findings"
            echo "‚úÖ Individual tools completed: $TOOLS_RUN"
          else
            echo "‚ùå No security tools could be executed"
            SCAN_STATUS="failed"
          fi
        fi
        
        
        # Analyze results and generate reports
        echo "üìä Analyzing scan results..."
        
        # Aggregate results from individual tools if needed
        if [ "$SECUREFLOW_SUCCESS" = "false" ] && [ -n "$TOOLS_RUN" ]; then
          echo "ÔøΩ Aggregating results from individual tools..."
          
          # Create a combined SARIF file
          cat > "$PRIMARY_OUTPUT" << 'SARIF_START'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
SARIF_START
          
          FIRST_RUN=true
          
          # Process Semgrep results
          if [ -f "security-results/semgrep.json" ]; then
            echo "üìù Processing Semgrep results..."
            if command -v jq &> /dev/null; then
              SEMGREP_COUNT=$(jq '.results | length' security-results/semgrep.json 2>/dev/null || echo "0")
              FINDINGS_COUNT=$((FINDINGS_COUNT + SEMGREP_COUNT))
              echo "  Found $SEMGREP_COUNT SAST findings"
              
              # Convert to SARIF format (simplified)
              if [ "$FIRST_RUN" = "false" ]; then echo "    ," >> "$PRIMARY_OUTPUT"; fi
              cat >> "$PRIMARY_OUTPUT" << 'SEMGREP_RUN'
    {
      "tool": {
        "driver": {
          "name": "Semgrep",
          "version": "1.0.0",
          "informationUri": "https://semgrep.dev/"
        }
      },
      "results": []
    }
SEMGREP_RUN
              FIRST_RUN=false
            fi
          fi
          
          # Process TruffleHog results
          if [ -f "security-results/trufflehog.json" ]; then
            echo "üìù Processing TruffleHog results..."
            if command -v jq &> /dev/null; then
              TRUFFLEHOG_COUNT=$(wc -l < security-results/trufflehog.json 2>/dev/null || echo "0")
              FINDINGS_COUNT=$((FINDINGS_COUNT + TRUFFLEHOG_COUNT))
              echo "  Found $TRUFFLEHOG_COUNT secret findings"
              
              if [ "$FIRST_RUN" = "false" ]; then echo "    ," >> "$PRIMARY_OUTPUT"; fi
              cat >> "$PRIMARY_OUTPUT" << 'TRUFFLEHOG_RUN'
    {
      "tool": {
        "driver": {
          "name": "TruffleHog",
          "version": "3.0.0",
          "informationUri": "https://github.com/trufflesecurity/trufflehog"
        }
      },
      "results": []
    }
TRUFFLEHOG_RUN
              FIRST_RUN=false
            fi
          fi
          
          # Close SARIF file
          cat >> "$PRIMARY_OUTPUT" << 'SARIF_END'
  ]
}
SARIF_END
        fi
        
        # Generate HTML report if requested
        if [ "${{ inputs.generate-html }}" = "true" ]; then
          echo "üìÑ Generating HTML report..."
          
          cat > "$HTML_REPORT" << 'HTML_START'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecureFlow Security Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { text-align: center; border-bottom: 2px solid #007acc; padding-bottom: 20px; margin-bottom: 30px; }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .metric { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; border-left: 4px solid #007acc; }
        .metric.critical { border-left-color: #dc3545; }
        .metric.high { border-left-color: #fd7e14; }
        .metric.medium { border-left-color: #ffc107; }
        .metric h3 { margin: 0 0 10px 0; color: #333; }
        .metric .value { font-size: 2em; font-weight: bold; color: #007acc; }
        .section { margin-bottom: 30px; }
        .section h2 { color: #333; border-bottom: 1px solid #dee2e6; padding-bottom: 10px; }
        .tools-list { display: flex; flex-wrap: wrap; gap: 10px; }
        .tool-badge { background: #e9ecef; padding: 5px 10px; border-radius: 15px; font-size: 0.9em; }
        .findings { background: #f8f9fa; padding: 15px; border-radius: 5px; }
        .no-findings { color: #28a745; font-weight: bold; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è SecureFlow Security Report</h1>
            <p><strong>Project:</strong> ${{ inputs.target }} | <strong>Scan Date:</strong> $(date)</p>
            <p><strong>Project Type:</strong> ${{ inputs.project-type }} | <strong>Scan Types:</strong> ${{ inputs.scan-types }}</p>
        </div>
        
        <div class="summary">
            <div class="metric">
                <h3>Total Findings</h3>
                <div class="value">$FINDINGS_COUNT</div>
            </div>
            <div class="metric critical">
                <h3>Critical</h3>
                <div class="value">$CRITICAL_COUNT</div>
            </div>
            <div class="metric high">
                <h3>High</h3>
                <div class="value">$HIGH_COUNT</div>
            </div>
            <div class="metric">
                <h3>Scan Status</h3>
                <div class="value" style="font-size: 1.2em;">$SCAN_STATUS</div>
            </div>
        </div>
        
        <div class="section">
            <h2>üîß Tools Executed</h2>
            <div class="tools-list">
HTML_START
          
          if [ -n "$TOOLS_RUN" ]; then
            IFS=',' read -ra TOOLS <<< "$TOOLS_RUN"
            for tool in "${TOOLS[@]}"; do
              echo "                <span class=\"tool-badge\">$tool</span>" >> "$HTML_REPORT"
            done
          else
            echo "                <span class=\"tool-badge\">No tools executed</span>" >> "$HTML_REPORT"
          fi
          
          cat >> "$HTML_REPORT" << 'HTML_MIDDLE'
            </div>
        </div>
        
        <div class="section">
            <h2>üìä Scan Results</h2>
            <div class="findings">
HTML_MIDDLE
          
          if [ "$FINDINGS_COUNT" -eq 0 ]; then
            echo "                <p class=\"no-findings\">‚úÖ No security issues detected!</p>" >> "$HTML_REPORT"
          else
            echo "                <p>‚ö†Ô∏è <strong>$FINDINGS_COUNT</strong> security findings detected.</p>" >> "$HTML_REPORT"
            echo "                <p>Please review the detailed results in the SARIF file: <code>$PRIMARY_OUTPUT</code></p>" >> "$HTML_REPORT"
          fi
          
          # Add file listings if available
          if [ -d "security-results" ]; then
            echo "                <h3>üìÅ Generated Files:</h3>" >> "$HTML_REPORT"
            echo "                <ul>" >> "$HTML_REPORT"
            for file in security-results/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                filesize=$(du -h "$file" | cut -f1)
                echo "                    <li><code>$filename</code> ($filesize)</li>" >> "$HTML_REPORT"
              fi
            done
            echo "                </ul>" >> "$HTML_REPORT"
          fi
          
          cat >> "$HTML_REPORT" << 'HTML_END'
            </div>
        </div>
        
        <div class="footer">
            <p>Generated by SecureFlow-Core | <a href="https://github.com/your-org/secureflow-core">GitHub Repository</a></p>
        </div>
    </div>
</body>
</html>
HTML_END
          
          echo "‚úÖ HTML report generated: $HTML_REPORT"
        fi
        
        # Ensure primary output file exists
        if [ ! -f "$PRIMARY_OUTPUT" ]; then
          echo "‚ö†Ô∏è Primary output file not found, creating minimal SARIF..."
          cat > "$PRIMARY_OUTPUT" << 'MINIMAL_SARIF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SecureFlow-Core-Fallback",
          "version": "1.0.0"
        }
      },
      "results": []
    }
  ]
}
MINIMAL_SARIF
        fi
        
        # Parse results for statistics if we have jq
        if command -v jq &> /dev/null && [ -f "$PRIMARY_OUTPUT" ]; then
          echo "üìä Parsing results with jq..."
          FINDINGS_COUNT=$(jq '[.runs[]?.results? // [] | length] | add // 0' "$PRIMARY_OUTPUT" 2>/dev/null || echo "$FINDINGS_COUNT")
          CRITICAL_COUNT=$(jq '[.runs[]?.results[]? // empty | select(.level == "error" or (.properties?.severity? // "") == "critical")] | length' "$PRIMARY_OUTPUT" 2>/dev/null || echo "$CRITICAL_COUNT")
          HIGH_COUNT=$(jq '[.runs[]?.results[]? // empty | select(.level == "warning" or (.properties?.severity? // "") == "high")] | length' "$PRIMARY_OUTPUT" 2>/dev/null || echo "$HIGH_COUNT")
        fi
        
        # Final scan statistics
        echo "üìà Final Scan Statistics:"
        echo "  Total findings: $FINDINGS_COUNT"
        echo "  Critical: $CRITICAL_COUNT"
        echo "  High: $HIGH_COUNT"
        echo "  Tools executed: $TOOLS_RUN"
        echo "  Scan status: $SCAN_STATUS"
        
        # Set outputs
        echo "results-file=$PRIMARY_OUTPUT" >> $GITHUB_OUTPUT
        echo "html-report=$HTML_REPORT" >> $GITHUB_OUTPUT
        echo "findings-count=$FINDINGS_COUNT" >> $GITHUB_OUTPUT
        echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "scan-status=$SCAN_STATUS" >> $GITHUB_OUTPUT
        echo "tools-run=$TOOLS_RUN" >> $GITHUB_OUTPUT
        
        # Check if we should fail on findings
        if [ "${{ inputs.fail-on-findings }}" = "true" ] && [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "‚ùå Critical security findings detected - failing action"
          SCAN_STATUS="failed"
          echo "scan-status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ Scan completed with status: $SCAN_STATUS"
