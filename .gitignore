# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For PyCharm
#  Community Edition, use 'PyCharm CE' instead of 'PyCharm'.
.idea/

# Visual Studio Code
.vscode/
*.code-workspace

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# SecureFlow-Core Specific Files
# ================================

# SecureFlow configuration and logs
.secureflow.yaml
.secureflow.yml
.secureflow-*.yaml
.secureflow-*.yml
*.secureflow.yaml
*.secureflow.yml
.secureflow.log
.secureflow-*.log
secureflow.log
secureflow-*.log

# Security scan results and reports
scan-results/
security-reports/
security-results.json
security-results.sarif
security-results.xml
*-results.json
*-results.sarif
*-results.xml
*-scan-*.json
*-scan-*.sarif
*-scan-*.xml

# Compliance reports
compliance-*.html
compliance-*.json
compliance-*.pdf
compliance-executive-summary.*

# Security dashboard files
security-dashboard.*
dashboard-data.*

# Temporary security files
.security-temp/
.scan-cache/
.vulnerability-cache/

# Security tool outputs
.semgrep/
.bandit/
.safety/
.trufflehog/
.checkov/
.trivy/
trivy-cache/

# Azure DevOps specific
.azure/
azure-pipelines-vars/
.azuredevops/

# Security tokens and credentials (NEVER commit these!)
# ====================================================
.env.local
.env.*.local
secrets.yaml
secrets.yml
credentials.json
credentials.yaml
*-credentials.*
*-secrets.*
*.pem
*.key
*.cert
*.crt
*_rsa
*_rsa.pub
id_rsa*
id_dsa*
id_ecdsa*
id_ed25519*

# API tokens and keys
.api-keys
.tokens
*-token.txt
*-key.txt
pat-token*
github-token*
azure-token*

# Cloud provider credentials
.aws/
.azure/
.gcp/
gcp-credentials.json
aws-credentials
azure-credentials

# Development and Testing
# =======================

# Test artifacts
test-results/
test-reports/
.coverage
htmlcov/
.pytest_cache/
.tox/

# Development databases
*.db
*.sqlite
*.sqlite3
test.db
dev.db

# Development logs
debug.log
development.log
*.log

# Temporary files
*.tmp
*.temp
*.bak
*.swp
*.swo
*~

# OS generated files
# ==================

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Docker and Container Files
# ==========================
.dockerignore
Dockerfile.dev
docker-compose.override.yml
.docker/

# Node.js (for documentation tools)
# =================================
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Documentation build artifacts
# =============================
docs/_build/
docs/build/
site/
_site/

# Backup files
# ============
*.backup
*.bck
backup/
backups/

# Archive files
# =============
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Editor artifacts
# ================
*.sublime-project
*.sublime-workspace
.vscode/settings.json
.vscode/launch.json
.vscode/extensions.json

# Custom project artifacts
# ========================
scratch/
playground/
experiments/
local-config/
personal-notes.md
TODO.md
NOTES.md
