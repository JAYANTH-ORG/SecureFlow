# Container Security Template
# Copy this file to .github/workflows/container-security.yml in your repository

name: üê≥ Container Security

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Container image to scan'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  container-security:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Setup SecureFlow
      uses: your-org/secureflow-core/.github/actions/setup-secureflow@main

    - name: Scan Dockerfile
      if: hashFiles('Dockerfile') != ''
      run: |
        echo "üîç Scanning Dockerfile for security issues..."
        secureflow scan iac . \
          --tool checkov \
          --framework dockerfile \
          --output-format json \
          --output-file dockerfile-scan.json
      continue-on-error: true

    - name: Build container image
      if: hashFiles('Dockerfile') != ''
      run: |
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "üèóÔ∏è Building container image: $IMAGE_TAG"
        
        docker build -t "$IMAGE_TAG" .
        echo "BUILT_IMAGE=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Scan container image
      run: |
        if [ -n "${{ github.event.inputs.image_name }}" ]; then
          SCAN_IMAGE="${{ github.event.inputs.image_name }}"
        elif [ -n "$BUILT_IMAGE" ]; then
          SCAN_IMAGE="$BUILT_IMAGE"
        else
          echo "No container image to scan"
          exit 0
        fi
        
        echo "üê≥ Scanning container image: $SCAN_IMAGE"
        
        secureflow scan container "$SCAN_IMAGE" \
          --tool trivy \
          --output-format json \
          --output-file container-results.json \
          --severity HIGH,CRITICAL

    - name: Generate container security report
      if: always()
      run: |
        secureflow report generate \
          --input "*-results.json" \
          --format html,sarif \
          --output-dir container-report \
          --title "Container Security Report"

    - name: Upload SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: container-report/
      continue-on-error: true

    - name: Upload container report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: container-security-report
        path: |
          container-report/
          *-results.json

    - name: Container security summary
      if: always()
      run: |
        python -c "
        import json, glob, os
        
        total_vulns = 0
        critical_vulns = 0
        high_vulns = 0
        
        for file in glob.glob('*-results.json'):
            if os.path.exists(file):
                try:
                    with open(file) as f:
                        data = json.load(f)
                        if 'vulnerabilities' in data:
                            for v in data['vulnerabilities']:
                                total_vulns += 1
                                if v.get('severity') == 'critical':
                                    critical_vulns += 1
                                elif v.get('severity') == 'high':
                                    high_vulns += 1
                except: pass
        
        print(f'üê≥ Container Security Summary:')
        print(f'üìä Total Vulnerabilities: {total_vulns}')
        print(f'üî¥ Critical: {critical_vulns}')
        print(f'üü† High: {high_vulns}')
        
        with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
            f.write(f'''# üê≥ Container Security Summary
        
        - üìä **Total Vulnerabilities:** {total_vulns}
        - üî¥ **Critical:** {critical_vulns}
        - üü† **High:** {high_vulns}
        
        {'üö® **Critical vulnerabilities found!** Update base images and dependencies.' if critical_vulns > 0 else '‚úÖ **No critical vulnerabilities detected.**'}
        ''')
        "

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let summary = 'Container security scan completed.';
          
          try {
            // Try to read scan results
            const files = ['container-results.json', 'dockerfile-scan.json'];
            let totalVulns = 0;
            let criticalVulns = 0;
            
            for (const file of files) {
              if (fs.existsSync(file)) {
                const data = JSON.parse(fs.readFileSync(file, 'utf8'));
                if (data.vulnerabilities) {
                  totalVulns += data.vulnerabilities.length;
                  criticalVulns += data.vulnerabilities.filter(v => v.severity === 'critical').length;
                }
              }
            }
            
            summary = `## üê≥ Container Security Results
            
            - üìä **Total Vulnerabilities:** ${totalVulns}
            - üî¥ **Critical:** ${criticalVulns}
            
            ${criticalVulns > 0 ? '‚ö†Ô∏è **Critical vulnerabilities found!** Please review before merging.' : '‚úÖ **No critical vulnerabilities detected.**'}`;
            
          } catch (error) {
            console.log('Could not parse scan results:', error.message);
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
