# Java Maven Security Workflow Template
# Optimized for Maven-based Java projects using SecureFlow-Core
# 
# This workflow installs SecureFlow-Core directly from GitHub and provides:
# - Comprehensive SAST scanning with Semgrep
# - Secret detection with TruffleHog
# - Infrastructure as Code scanning with Checkov
# - Maven OWASP dependency vulnerability checking
# - Container security scanning
# - Integrated SARIF reporting
#
# Copy this file to .github/workflows/security.yml in your repository
# Copy this file to .github/workflows/security.yml in your repository

name: üõ°Ô∏è Java Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  JAVA_VERSION: '17'

jobs:
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      pull-requests: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Set up Python for SecureFlow
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install SecureFlow-Core from GitHub
      run: |
        echo "üì¶ Installing SecureFlow-Core from GitHub repository..."
        python -m pip install --upgrade pip
        
        # Install SecureFlow-Core directly from GitHub
        # Replace 'your-org/secureflow-core' with the actual GitHub repository
        pip install git+https://github.com/your-org/secureflow-core.git
        
        # Verify installation
        python -c "import secureflow_core; print(f'‚úÖ SecureFlow-Core {secureflow_core.__version__} installed successfully')"

    - name: Run SecureFlow security scan
      run: |
        echo "üõ°Ô∏è Running SecureFlow comprehensive security scan for Maven project..."
        
        # Use SecureFlow CLI if available, otherwise use Python module
        if command -v secureflow &> /dev/null; then
          echo "Using SecureFlow CLI..."
          secureflow scan all . \
            --scan-types sast,secrets,dependencies,containers \
            --project-type java-maven \
            --output-format sarif \
            --output-file security-results.sarif \
            --severity-threshold medium \
            --java-version ${{ env.JAVA_VERSION }}
        else
          echo "Using SecureFlow Python module..."
          python -c "
import asyncio
import os
from secureflow_core import SecureFlow
from secureflow_core.config import Config

async def run_scan():
    try:
        # Configure for Java Maven project
        config = Config()
        config.scanning.project_type = 'java-maven'
        config.scanning.scan_types = ['sast', 'secrets', 'dependencies', 'containers']
        config.scanning.severity_threshold = 'medium'
        config.output.format = 'sarif'
        config.output.file = 'security-results.sarif'
        
        # Initialize SecureFlow
        sf = SecureFlow(config)
        
        # Run comprehensive scan
        results = await sf.scan_repository('.')
        
        print('‚úÖ Security scan completed successfully')
        print(f'Scanned {len(results)} targets')
        
        return results
    except Exception as e:
        print(f'‚ùå Scan failed: {str(e)}')
        raise

# Run the scan
asyncio.run(run_scan())
          "
        fi
      continue-on-error: true

    - name: Compile project (for better static analysis)
      run: |
        echo "ÔøΩ Compiling Maven project for analysis..."
        mvn clean compile -DskipTests
      continue-on-error: true

    - name: Ensure SARIF file exists
      run: |
        echo "üîÑ Checking SARIF results..."
        
        # Check if SecureFlow generated SARIF file
        if [ -f "security-results.sarif" ]; then
          echo "‚úÖ SARIF file generated by SecureFlow"
          echo "File size: $(wc -c < security-results.sarif) bytes"
        else
          echo "‚ö†Ô∏è No SARIF file found, creating empty one"
          # Create minimal valid SARIF file
          cat > security-results.sarif << 'EOF'
{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SecureFlow-Core",
          "version": "1.0.0"
        }
      },
      "results": []
    }
  ]
}
EOF
        fi
      continue-on-error: true

    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: security-results.sarif
      if: always()
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-java-maven
        path: |
          security-results.sarif
          security-results/
          **/target/dependency-check-report.html
          **/target/spotbugsXml.xml
        retention-days: 30
      if: always()

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let summary = "## üõ°Ô∏è Java Security Scan Results\n\n";
          summary += "**Project Type:** Maven Java Project\n";
          summary += `**Java Version:** ${{ env.JAVA_VERSION }}\n\n`;
          
          // Try to read security results for summary
          let totalIssues = 0;
          let scanCount = 0;
          
          try {
            // Count Semgrep issues
            if (fs.existsSync('security-results/semgrep.json')) {
              const semgrep = JSON.parse(fs.readFileSync('security-results/semgrep.json', 'utf8'));
              totalIssues += semgrep.results?.length || 0;
              scanCount++;
            }
            
            // Count secret issues  
            if (fs.existsSync('security-results/secrets.json')) {
              const secrets = fs.readFileSync('security-results/secrets.json', 'utf8');
              const lines = secrets.trim().split('\n').filter(line => line.trim());
              totalIssues += lines.length;
              scanCount++;
            }
            
            summary += `### üìä Scan Summary\n`;
            summary += `- **Tools Run:** ${scanCount}\n`;
            summary += `- **Issues Found:** ${totalIssues}\n\n`;
          } catch (error) {
            console.log('Could not parse security results for summary');
            summary += `### üìä Scan Summary\n`;
            summary += `- **Status:** Scans completed\n\n`;
          }
          
          summary += "### üîç Scans Performed:\n";
          summary += "- üîç **Static Analysis (SAST)** - Java code vulnerability detection\n";
          summary += "- üîê **Secret Scanning** - Credential and API key detection\n";
          summary += "- üì¶ **Dependency Analysis** - Maven dependency vulnerability scanning\n";
          summary += "- üê≥ **Container Scanning** - Docker image security analysis\n\n";
          summary += "üìÑ Detailed reports are available in the [Security tab](../../security) and [workflow artifacts](../../actions/runs/${{ github.run_id }}).\n\n";
          summary += "*Powered by SecureFlow-Core - Java Maven Security Template*";
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Fail on high severity issues
      run: |
        echo "üîç Checking for high severity security issues..."
        
        # Parse SARIF results and fail if high/critical issues found
        if [ -f security-results.sarif ]; then
          python3 -c "
        import json
        import sys
        
        with open('security-results.sarif', 'r') as f:
            sarif = json.load(f)
        
        high_severity_count = 0
        for run in sarif.get('runs', []):
            for result in run.get('results', []):
                level = result.get('level', 'note')
                if level in ['error', 'warning']:  # Map to high/critical
                    high_severity_count += 1
        
        print(f'High/Critical severity issues found: {high_severity_count}')
        
        if high_severity_count > 0:
            print('‚ùå Security scan failed due to high severity issues')
            sys.exit(1)
        else:
            print('‚úÖ No high severity security issues found')
        "
        else
          echo "‚ö†Ô∏è No SARIF results file found"
        fi
